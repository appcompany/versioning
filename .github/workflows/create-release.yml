name: Create Release
on:
  push:
    branches:
      - main

jobs:
  release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2
      - name: Run Versioning
        id: versioning
        uses: ./.github/actions/self
        with:
          version_template: '<<VERSION_STRING>>'
          create: false
          track: main
          token: ${{ secrets.TOKEN_GITHUB_RELEASES }}
      - name: Write version.json
        run: echo '${{ steps.versioning.outputs.version }}' > version.json
      - name: Create Release
        uses: actions/github-script@v4
        with:
          github-token: ${{ secrets.TOKEN_GITHUB_RELEASES }}
          script: |
            const { readFileSync } = require('fs');
            const version = JSON.parse(readFileSync('version.json', 'utf-8'))
            const ref = `heads/${ version.version.versionString }-action-create`
            const content = readFileSync('action.yml', 'utf-8').replace(
              'docker://ghcr.io/onezerocompany/versioning-action:latest',
              `docker://ghcr.io/onezerocompany/versioning-action:${version.version.versionString}`
            );

            const mainBranch = await github.git.getRef({
              ...context.repo,
              ref: 'heads/main'
            })

            await github.git.createRef({
              ...context.repo, ref: `refs/${ref}`,
              sha: mainBranch.data.object.sha
            })

            const file = await github.repos.getContent({
              ...context.repo,
              path: 'action.yml'
            })

            await github.repos.createOrUpdateFileContents({
              ...context.repo,
              path: 'action.yml',
              message: 'updated docker version',
              content: Buffer.from(content).toString('base64'),
              sha: file.data.sha,
              branch: `${ version.version.versionString }-action-create`
            })

            const release = await github.repos.createRelease({
              ...context.repo,
              name: version.version.versionString,
              tag_name: version.version.versionString,
              body: `${version.changelogs.public.content}${
                version.changelogs.private.hasChanges
                  ? `\n---\n${version.changelogs.private.content}`
                  : ''
              }`,
              target_commitish: `${ version.version.versionString }-action-create`,
            });

            await github.repos.uploadReleaseAsset({
              ...context.repo,
              release_id: release.data.id,
              name: 'version.json',
              data: JSON.stringify(version),
            });

            await github.git.deleteRef({ ...context.repo, ref })